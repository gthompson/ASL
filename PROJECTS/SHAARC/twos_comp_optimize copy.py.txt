#!/usr/bin/env python
# coding: utf-8

"""
Explore different functions to compute twos complement, 
and determine which correct method is the most efficient.

The algorithm needs to work for an arbitrary number of bits, expressed
by the NBITS variable. 

The desired output is best illustrated by example:
1. Assume the input is an 8-bit unsigned integer.
2. Values from 0-127 should be unmodified.
3. Values from 128-255 should be replaced by their twos complement.
4. Therefore the sequence [255 1 128 85 171 0] should be replaced by...
5. [-1 1 -128 85 -85 0], i.e. integers in range 128-255 have had 2**8 (256) subtracted
6. 2**8 can also be expressed as (1 << 8) which is binary 1 bit shifted 8 positions left
7. Generally, 2**NBITS can be expressed as 1<<NBITS

Credit for the first three functions goes to Gary Bastin. 
I modified them to allow array input, rather than scalars, 
and to modify the input array, rather than return a new array.

Glenn Thompson 2021/10
"""
# Imports
import timeit
import numpy as np
import matplotlib.pyplot as plt

# Constants
NBITS_ARRAY = [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]
#ITERATIONS_ARRAY = [2, 4, 8, 16, 32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000, 256000, 512000, 1024000]
ITERATIONS = 1000

def twos_comp_1(vals, nbits):
    for i in range(len(vals)):
        if (vals[i] & (1 << (nbits - 1))) != 0:
            vals[i] = vals[i] - (1 << nbits)
"""
def twos_comp_2(vals, nbits):
    for i in range(len(vals)):
        if vals[i] < 0: # convert back
            vals[i] += (1 << nbits)
        elif (vals[i] & (1 << (nbits - 1))) != 0:
            vals[i] = vals[i] - (1 << nbits) 
"""          
def twos_comp_2(vals, nbits):
    for i in range(len(vals)):
        if (vals[i] & (1 << (nbits - 1))):
            vals[i] -= (1 << nbits)  
            
def twos_comp_np(vals, nbits):
    # numpy only
    vals[vals & (1<<(nbits-1)) != 0] -= (1<<nbits)
    
def twos_comp_gt(vals, nbits):
    # numpy only
    vals[vals>=(1<<(nbits-1))] -= (1<<nbits)
    
def twos_comp_simple(vals, nbits):
    # numpy only
    vals[vals>=2**(nbits-1)] -= (2**nbits)
    
def twos_comp_gt_v2(vals, nbits):
    # numpy only
    vals[vals>=TWONBITSMINUS1] -= TWONBITS  

"""
def twos_comp_gt_v3(vals, nbits):
    for i in range(len(vals)):
        if (vals[i] & TWONBITSMINUS1) != 0:
            vals[i] = vals[i] - TWONBITS   
"""      
def twos_comp_gt_v3(vals, nbits):
    for i in range(len(vals)):
        if (vals[i] > TWONBITSMINUS1):
            vals[i] -= TWONBITS   
            
def twos_comp_gt_v4(vals, nbits):
    for i in range(len(vals)):
        if (vals[i] & TWONBITSMINUS1):
            vals[i] -= TWONBITS               




# Run tests
print('\nRESULTS:')

"""
# What is commented out here are the initial results, to determine the effect of number of iterations on average run time
# I found that above 100 iterations (to at least 1 million), it doesn't matter. 
for NBITS in NBITS_ARRAY:
    TWONBITSMINUS1 = 1<<(NBITS-1)
    TWONBITS = 1<<NBITS

    # Create some values
    tot = 0
    for c in range(0,NBITS,2):
        tot += 2**c
    unsigned_list = [(1<<NBITS)-1, 1, 1<<(NBITS-1), tot, (1<<NBITS)-tot, 0]
    #unsigned = np.array([(1<<NBITS)-1, 1, 1<<(NBITS-1), tot, (1<<NBITS)-tot, 0], dtype='i8') #dtype=np.uint64)

    for func in [twos_comp_1, twos_comp_2, twos_comp_np, twos_comp_gt, twos_comp_simple, twos_comp_gt_v2, twos_comp_gt_v3, twos_comp_gt_v4]:
    #for func in [twos_comp_1, twos_comp_2]:        
        
        plt.figure()
        for values in [unsigned_list, np.array(unsigned_list)]:
            t_all = []
            for ITERATIONS in ITERATIONS_ARRAY:

                # Test for correct results
                v = values.copy()
                print('\nFunction: ', func)
                print('Number of bits: ', NBITS)
                print('Input: ', v)
                print('Input data type: ', type(v) )
                try:
                    func(v, NBITS)
                except Exception as e:
                    print(e)
                    t_all.append(0)      
                else:
                    print('Output: ', v)

                    # Test for speed
                    v = values.copy()
                    t = timeit.timeit('func(v, NBITS)', number=ITERATIONS, globals=globals())

                    print('Seconds: %.3f' % t)
                    print('Number of iterations: ', ITERATIONS)
                    t_all.append(1000000*t/ITERATIONS)
            plt.semilogx(ITERATIONS_ARRAY, t_all, label=type(v))

        plt.title(func)
        plt.xlabel('Iterations')
        plt.ylabel('Average Time (us)')
        plt.legend()
        plt.show()

# Speed test - see if creating a map is faster
ITERATIONS = 1000
def twos_comp_gt_v5(val):
    if (val > TWONBITSMINUS1):
        val -= TWONBITS 
    return val

print('\nSpeed test using a map')
t = timeit.timeit('list(map(twos_comp_gt_v5, values))', number=ITERATIONS, globals=globals())
print('Seconds: %.3f' % t)

# Speed test - see if creating a lambda function is faster
print('\nSpeed test using a lambda function')
t = timeit.timeit('''
ans=[None]*len(values)
for i,x in enumerate(values):
    def res(x): return x-TWONBITS
    ans[i] = res(x)
''', number=ITERATIONS, globals=globals())
print('Seconds: %.3f' % t)



# Version info

print('\nVersion information')

import numpy.distutils.system_info as sysinfo
print(sysinfo.platform_bits)

import platform
print(platform.architecture())

from platform import python_version
print(python_version())
print(np.version.version)
"""

# construct graphs over NBITS, ITERATIONS
# remove ipynb
# can i use a modulus function?
# can i use an array?


# would be better to plot average time vs. number of bits, as little change versus iterations > 100,000

plt.figure()
list_methods = [twos_comp_1, twos_comp_2, twos_comp_gt_v3, twos_comp_gt_v4] # list methods only
numpy_methods = [twos_comp_1, twos_comp_2, twos_comp_np, twos_comp_gt, twos_comp_simple, twos_comp_gt_v2, twos_comp_gt_v3, twos_comp_gt_v4] # numpy array methods
    
#for set_of_methods in (list_methods, numpy_methods):
for set_of_methods in (numpy_methods, ):
    for func in set_of_methods:
        
        t_all = []
        
        for NBITS in NBITS_ARRAY:
            TWONBITSMINUS1 = 1<<(NBITS-1)
            TWONBITS = 1<<NBITS

            # Create some values
            tot = 0
            for c in range(0,NBITS,2):
                tot += 2**c
            values = [(1<<NBITS)-1, 1, 1<<(NBITS-1), tot, (1<<NBITS)-tot, 0]        
            if set(set_of_methods) == set(numpy_methods): # convert to numpy array
                values = np.array(values) #dtype='i8') #dtype=np.uint64)

            # Test for correct results
            v = values.copy()
            print('\nFunction: ', func)
            print('Number of bits: ', NBITS)
            print('Input: ', v)
            print('Input data type: ', type(v) )
            try:
                func(v, NBITS)
            except Exception as e:
                print(e)
                t_all.append(None)      
            else:
                print('Output: ', v)

                # Test for speed
                v = values.copy()
                t = timeit.timeit('func(v, NBITS)', number=ITERATIONS, globals=globals())

                print('Seconds: %.3f' % t)
                print('Number of iterations: ', ITERATIONS)
                t_all.append(1000000*t/ITERATIONS)
        input_type = 'list'
        if isinstance(v, np.ndarray):
            input_type = 'numpy array'
        plt.plot(NBITS_ARRAY, t_all, label=func.__name__[0:15]+' : ' + input_type )
#plt.xlabel('Number of bits')
#plt.ylabel('Average Time (us)')
#plt.legend()
#plt.show()

# Speed test - see if creating a map is faster
ITERATIONS = 1000
def twos_comp_gt_v5(val):
    if (val > TWONBITSMINUS1):
        val -= TWONBITS 
    return val
for input_type in ('array', ): #('list', 'array'):
    t_all = []
    t2_all  = []
    for NBITS in NBITS_ARRAY:
        TWONBITSMINUS1 = 1<<(NBITS-1)
        TWONBITS = 1<<NBITS

        # Create some values
        tot = 0
        for c in range(0,NBITS,2):
            tot += 2**c
        values = [(1<<NBITS)-1, 1, 1<<(NBITS-1), tot, (1<<NBITS)-tot, 0] 
        if input_type == 'array':
            values = np.array(values) #dtype='i8') #dtype=np.uint64) 
        t = timeit.timeit('list(map(twos_comp_gt_v5, values))', number=ITERATIONS, globals=globals())
        t_all.append(1000000*t/ITERATIONS)

    
        t2 = timeit.timeit('''
ans=[None]*len(values)
for i,x in enumerate(values):
    def res(x): return x-TWONBITS
    ans[i] = res(x)
''', number=ITERATIONS, globals=globals())  
        t2_all.append(1000000*t2/ITERATIONS)
        
    plt.plot(NBITS_ARRAY, t_all, label= 'using map : ' + input_type ) 
    plt.plot(NBITS_ARRAY, t2_all, label= 'using lambda fn : ' + input_type )


plt.xlabel('Number of bits')
plt.ylabel('Average Time (us)')
plt.legend()
plt.show()